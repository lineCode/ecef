/* controls size (in pixels) of event areas */
#define TOP_EVENT_SIZE 10
#define BOTTOM_EVENT_SIZE 10
#define LEFT_EVENT_SIZE 10
#define RIGHT_EVENT_SIZE 10

collections {
   group { "elm/layout/ecef/base"; nomouse;
      script_recursion: 1;
      images.image: "box_glow.png" COMP;
      images.image: "glow_round_corners_small.png" COMP;
      images.image: "knob_round_small_busy.png" COMP;
      script {
         public urlbar_changed = 0;
         public urlbar_visible = 0;
      }
      parts {
         rect { "base";
            desc { color: 0 0 0 255; }
         }
         swallow { "ecef.swallow.browser"; mouse; }
         rect { "urlbar_fader";
            desc {
               rel.to_y: "ecef.swallow.urlbar";
               color: 0 0 0 192;
            }
         }
         swallow { "ecef.swallow.back"; mouse;
            desc { align: 0 0;
               rel1.offset: 3 0;
               rel2.relative: 0 1;
               rel.to_y: "ecef.swallow.urlbar";
            }
         }
         swallow { "ecef.swallow.forward"; mouse;
            desc { align: 0 0;
               rel1.relative: 1 0;
               rel2.relative: 0 1;
               rel1.offset: 8 0;
               rel1.to_x: "ecef.swallow.back";
               rel.to_y: "ecef.swallow.urlbar";
            }
         }
         swallow { "ecef.swallow.reload"; mouse;
            desc { align: 0 0;
               rel1.relative: 1 0;
               rel2.relative: 0 1;
               rel1.offset: 8 0;
               rel1.to_x: "ecef.swallow.forward";
               rel.to_y: "ecef.swallow.urlbar";
            }
         }
         image { "urlbar_border";
            desc {
               image.normal: "box_glow.png";
               fill.smooth: 0;
               image.border: 12 12 12 12;
               image.middle: 0;
               rel1.offset: -7 -6;
               rel2.offset: 7 5;
               rel.to: "ecef.swallow.urlbar";
            }
         }
         swallow { "ecef.swallow.urlbar"; mouse;
            desc { hid; align: 0.0 0;
               rel1.relative: 1 -0.5;
               rel2.relative: 1 0;
               rel1.offset: 8 0;
               rel2.offset: -3 -1;
               rel1.to_x: "ecef.swallow.reload";
            }
            desc { "visible"; align: 0.0 0;
               rel1.relative: 1 0;
               rel2.relative: 1 0;
               rel1.offset: 8 0;
               rel2.offset: -3 30;
               rel1.to_x: "ecef.swallow.reload";
            }
         }
         program { "show_urlbar";
            signal: "ecef,urlbar,show"; source: "ecef";
            script {
               set_int(urlbar_changed, 0);
               stop_program(get_program_id("hide_urlbar_delayed"));
            }
            after: "show_urlbar_begin";
         }
         program { "show_urlbar_begin";
            script {
               set_int(urlbar_visible, 1);
            }
            sequence {
               action: STATE_SET "visible";
               transition: LINEAR 0.4;
               target: "ecef.swallow.urlbar";
               action: SIGNAL_EMIT "ecef,urlbar,visible" "ecef";
            }
         }
         program { signal: "ecef,urlbar,change"; source: "ecef";
            script {
               set_int(urlbar_changed, 1);
            }
            after: "show_urlbar_begin";
            after: "hide_urlbar_delayed";
         }
         program { "hide_urlbar_delayed";
            in: 3.0 0;
            after: "hide_urlbar";
         }
         program { "hide_urlbar";
            filter: "ecef.swallow.urlbar" "visible";
            signal: "ecef,urlbar,hide"; source: "ecef";
            script {
               set_int(urlbar_changed, 0);
               set_int(urlbar_visible, 0);
            }
            sequence {
               action: STATE_SET "default";
               transition: LINEAR 0.4;
               target: "ecef.swallow.urlbar";
               action: SIGNAL_EMIT "ecef,urlbar,hidden" "ecef";
            }
         }

         // PAGELIST
         rect { "pagelist_fader";
            desc {
               rel.to: "ecef.swallow.pagelist";
               color: 0 0 0 192;
            }
         }
         swallow { "ecef.swallow.pagelist"; mouse;
            desc { hid; align: 0 0;
               rel1.relative: -1 0;
               rel2.relative: 0 1;
            }
            desc { "visible"; align: 0 0;
               rel2.relative: 0.4 1;
            }
         }
         program { "show_pagelist";
            signal: "ecef,pagelist,show"; source: "ecef";
            script {
               set_int(pagelist_locked, 1);
               stop_program(get_program_id("hide_pagelist_delayed"));
            }
            after: "show_pagelist_begin";
         }
         program { "show_pagelist_begin";
            script {
               set_int(pagelist_visible, 1);
            }
            sequence {
               action: STATE_SET "visible";
               transition: LINEAR 0.4;
               target: "ecef.swallow.pagelist";
               action: SIGNAL_EMIT "ecef,pagelist,visible" "ecef";
            }
         }
         program { "hide_pagelist_delayed";
            in: 3.0 0;
            after: "hide_pagelist";
         }
         program { "hide_pagelist";
            filter: "ecef.swallow.pagelist" "visible";
            signal: "ecef,pagelist,hide"; source: "ecef";
            script {
               set_int(pagelist_visible, 0);
               set_int(pagelist_locked, 0);
            }
            sequence {
               action: STATE_SET "default";
               transition: LINEAR 0.4;
               target: "ecef.swallow.pagelist";
               action: SIGNAL_EMIT "ecef,pagelist,hidden" "ecef";
            }
         }

         // EVENTAREAS
         rect { "top_events"; mouse; repeat; scale;
            desc {
               min: 0 TOP_EVENT_SIZE;
               max: -1 TOP_EVENT_SIZE;
               align: 0.5 0;
               fixed: 0 1;
               color: 0 0 0 0;
               rel2.relative: 1 0;
            }
            desc { "hint_activate"; inherit: "default";
               color: 52 153 255 100;
            }
            desc { "hint_deactivate"; inherit: "default";
               color: 154 25 25 100;
            }
         }
         program { signal: "mouse,in"; source: "top_events";
            script {
               stop_program(get_program_id("hide_urlbar_delayed"));
               if (!get_int(urlbar_visible)) {
                  run_program(get_program_id("show_urlbar_begin"));
                  set_int(urlbar_changed, 1);
               }
            }
         }
         program { signal: "mouse,out"; source: "top_events";
            script {
               if (get_int(urlbar_changed))
                  run_program(get_program_id("hide_urlbar_delayed"));
            }
         }
         rect { "left_events"; mouse; repeat; scale;
            desc {
               min: LEFT_EVENT_SIZE 0;
               max: LEFT_EVENT_SIZE -1;
               align: 0 0.5;
               fixed: 1 0;
               color: 0 0 0 0;
               rel2.relative: 0 1;
            }
            desc { "hint_activate"; inherit: "default";
               color: 52 153 255 100;
            }
            desc { "hint_deactivate"; inherit: "default";
               color: 154 25 25 100;
            }
         }
         program { signal: "mouse,in"; source: "left_events";
            script {
               stop_program(get_program_id("hide_pagelist_delayed"));
               if (!get_int(pagelist_visible)) {
                  run_program(get_program_id("show_pagelist_begin"));
               }
            }
         }
         program { signal: "mouse,out"; source: "ecef.swallow.pagelist";
            script {
               if (!get_int(pagelist_locked))
                  run_program(get_program_id("hide_pagelist_delayed"));
            }
         }
         rect { "loading_clip";
            desc {
               color: 255 255 255 0;
               hid;
            }
            desc { "loading";
               color: 255 255 255 255;
            }
         }
         image { "knob"; scale;
            clip: "loading_clip";
            desc {
               fixed: 1 1;
               image.normal: "knob_round_small_busy.png";
               aspect_preference: SOURCE;
               min: 20 20;
               rel2.relative: 1.0 0.0;
               align: 1.0 0;
            }
         }
         image { "knob_spinner"; scale; clip: "loading_clip";
            desc {
               fixed: 1 1;
               rel.to: "knob";
               image.normal: "glow_round_corners_small.png";
               map.on: 1;
               map.smooth: 1;
               map.rotation.center: "knob";
            }
            desc {"spin"; inherit;
               map.rotation.z: 360;
            }
         }
         program {
            signal: "ecef,state,loading"; source: "ecef";
            filter: "knob_spinner" "default";
            sequence {
               action: STATE_SET "spin";
               name: "spin";
               transition: LINEAR 1.0;
               target: "knob_spinner";
               action: STATE_SET "default";
               name: "spin2";
               target: "knob_spinner";
               after: "spin";
            }
         }
         program { "load_clip";
            signal: "ecef,state,loading"; source: "ecef";
            filter: "loading_clip" "default";
            action: STATE_SET "loading";
            transition: SINUSOIDAL 0.25;
            target: "loading_clip";
         }
         program { "loaded";
            signal: "ecef,state,loaded"; source: "ecef";
            action: STATE_SET "default";
            transition: SINUSOIDAL 1.0;
            target: "loading_clip";
            sequence {
               action: ACTION_STOP;
               targets: "spin" "spin2";
               action: STATE_SET "default";
               target: "knob_spinner";
            }
         }
      }
   }
   group { "elm/button/base/browser_navigation"; nomouse;
      parts {
         swallow { "elm.swallow.content";
            clip: "clip";
            desc {
               aspect: 1.0 1.0;
               rel2.relative: 1 1;
            }
         }
         rect { "clip";
            desc {
               color: 255 255 255 255;
            }
            desc { "active";
               color: 52 153 255 255;
            }
         }
         rect { "events"; mouse;
            desc {
               color: 0 0 0 0;
            }
         }
         program { signal: "mouse,down,1"; source: "events";
            action: SIGNAL_EMIT "elm,action,press" "";
         }
         program { signal: "mouse,clicked,1"; source: "events";
            action: SIGNAL_EMIT "elm,action,click" "";
         }
         program { signal: "mouse,up,1"; source: "events";
            action: SIGNAL_EMIT "elm,action,unpress" "";
         }
         program { signal: "mouse,in"; source: "events";
            action: STATE_SET "active";
            target: "clip";
            transition: LINEAR 0.2 CURRENT;
         }
         program { signal: "mouse,out"; source: "events";
            action: STATE_SET "default";
            target: "clip";
            transition: LINEAR 0.2 CURRENT;
         }
      }
   }
   group { "elm/gengrid/item/default/pagelist"; nomouse;
      data.item: "selectraise" "on";
      data.item: "texts" "ecef.text.title";
      data.item: "contents" "ecef.swallow.view";
      parts {
         rect { "selection";
            scale: 1;
            desc {
               color: 222 222 222 0;
               hid;
            }
            desc { "selected";
               inherit: "default";
               color: 222 222 222 160;
               vis;
            }
         }
         program {
            signal: "elm,state,selected"; source: "elm";
            action: STATE_SET "selected";
            target: "selection";
            transition: LINEAR 0.15;
         }
         program {
            signal: "elm,state,unselected"; source: "elm";
            action: STATE_SET "default";
            target: "selection";
            transition: LINEAR 0.15;
         }
         rect { "mouse_indicator";
            scale: 1;
            desc {
               color: 52 153 255 0;
               hid;
            }
            desc { "active";
               inherit: "default";
               color: 52 153 255 160;
               vis;
            }
         }
         program {
            signal: "mouse,in"; source: "events";
            action: STATE_SET "active";
            target: "mouse_indicator";
            transition: LINEAR 0.15;
         }
         program {
            signal: "mouse,out"; source: "events";
            action: STATE_SET "default";
            target: "mouse_indicator";
            transition: LINEAR 0.15;
         }
         rect { "clip";
            desc {
               rel1.to: "ecef.swallow.view";
               rel2.to: "ecef.swallow.view";
            }
         }
         swallow { "ecef.swallow.view"; clip: "clip";
            desc {
               rel1.offset: 3 3;
               rel2.to_y: "ecef.text.title";
               rel2.relative: 1 0;
               rel2.offset: -4 -1;
            }
         }
         text { "ecef.text.title";
            desc {
               align: 0.0 0.0;
               rel1.relative: 0 1;
               rel1.offset: 1 -9;
               rel2.offset: -4 -9;
               text { font: "Sans"; size: 12;
               }
            }
         }
         rect { "events"; mouse;
            desc {
               color: 0 0 0 0;
            }
         }
      }
   }
   group { "elm/layout/ecef/dummy";
      parts {
         swallow { "elm.swallow.content"; }
      }
   }
#define IC(Name, File, Min, Max) \
   group { "elm/icon/"##Name##"/default"; min: Min Min; max: Max Max; \
   images.image: File COMP; parts { part { "base"; \
   desc { aspect: 1.0 1.0; aspect_preference: BOTH; \
   image.normal: File; } } } }

IC("back", "back.png", 16, 0);
IC("forward", "forward.png", 16, 0);
IC("reload", "reload.png", 16, 0);
}
